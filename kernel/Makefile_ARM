ROOT_DIR := $(realpath ..)
include $(ROOT_DIR)/config.mk

ARM_TOOLCHAIN_PATH := /usr/bin
ARM_PREFIX := arm-none-eabi

# Select architecture flags based on XLEN:
# For 32-bit ARM (for example, ARMv7-A with hardware FPU)
CFLAGS += -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=hard

INC_DIR := $(VORTEX_HOME)/kernel/include
SRC_DIR := $(VORTEX_HOME)/kernel/src_arm

# Optionally, set LLVM_CFLAGS for ARM if you plan to use Clang.
#LLVM_CFLAGS += --sysroot=$(ARM_SYSROOT)
#LLVM_CFLAGS += --gcc-toolchain=$(ARM_TOOLCHAIN_PATH)
# Remove any RISC-V specific LLVM flags:
# LLVM_CFLAGS += -Xclang -target-feature -Xclang +vortex -mllvm -vortex-branch-divergence=0

# Use the ARM GCC toolchain.
# Ensure that ARM_TOOLCHAIN_PATH and ARM_PREFIX are defined (for example, ARM_TOOLCHAIN_PATH := /usr and ARM_PREFIX := arm-linux-gnueabihf)
CC  = $(ARM_TOOLCHAIN_PATH)/$(ARM_PREFIX)-gcc
AR  = $(ARM_TOOLCHAIN_PATH)/$(ARM_PREFIX)-gcc-ar
DP  = $(ARM_TOOLCHAIN_PATH)/$(ARM_PREFIX)-objdump
CP  = $(ARM_TOOLCHAIN_PATH)/$(ARM_PREFIX)-objcopy

# Optimization and other flags.
CFLAGS += -O3 -fno-exceptions -fdata-sections -ffunction-sections
CFLAGS += -I$(INC_DIR) -I$(ROOT_DIR)/hw
CFLAGS += -DXLEN_$(XLEN)

PROJECT := libvortex

SRCS = $(SRC_DIR)/vx_start.S \
       $(SRC_DIR)/vx_syscalls.c \
       $(SRC_DIR)/vx_print.S \
       $(SRC_DIR)/tinyprintf.c \
       $(SRC_DIR)/vx_print.c \
       $(SRC_DIR)/vx_spawn.c \
       $(SRC_DIR)/vx_serial.S \
       $(SRC_DIR)/vx_perf.c

OBJS = $(addsuffix .o, $(notdir $(SRCS)))

all: $(PROJECT).a $(PROJECT).dump

$(PROJECT).dump: $(PROJECT).a
	$(DP) -D $(PROJECT).a > $(PROJECT).dump

%.S.o: $(SRC_DIR)/%.S
	$(CC) $(CFLAGS) -c $< -o $@

%.c.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

$(PROJECT).a: $(OBJS)
	$(AR) rcs $@ $^

.depend: $(SRCS)
	$(CC) $(CFLAGS) -MM $^ > .depend;

clean:
	rm -rf *.a *.o *.dump .depend
